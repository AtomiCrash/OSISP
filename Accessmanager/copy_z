// access_manager.c

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/stat.h>
#include <dirent.h>
#include <string.h>
#include <fcntl.h>
#include <errno.h>
#include <limits.h>
#include <libgen.h>
#include <sys/types.h>
#include <sys/mman.h>
#include <openssl/md5.h>

#define MAX_ARGS 20
#define BUFFER_SIZE 1024

typedef struct {
    char *name;
    char **args;
    int arg_count;
    char **file_patterns;
    int pattern_count;
    char **processed_files;  // Для хранения файлов, обработанных каждой программой
    int processed_count;
    char *output;  // Для хранения вывода программы
} ProgramInfo;

void handle_error(const char *msg, int critical) {
    perror(msg);
    if (critical) exit(EXIT_FAILURE);
}

char *get_md5_hash(const char *path) {
    FILE *file = fopen(path, "rb");
    if (!file) return NULL;

    unsigned char data[BUFFER_SIZE];
    unsigned char hash[MD5_DIGEST_LENGTH];
    MD5_CTX md5;
    MD5_Init(&md5);

    size_t bytes;
    while ((bytes = fread(data, 1, BUFFER_SIZE, file)) > 0) {
        MD5_Update(&md5, data, bytes);
    }
    fclose(file);

    MD5_Final(hash, &md5);
    char *hash_str = malloc(2 * MD5_DIGEST_LENGTH + 1);
    for (int i = 0; i < MD5_DIGEST_LENGTH; i++) {
        sprintf(&hash_str[i * 2], "%02x", hash[i]);
    }
    return hash_str;
}

int copy_file(const char *src, const char *dst) {
    FILE *in = fopen(src, "rb");
    FILE *out = fopen(dst, "wb");
    if (!in || !out) {
        if (in) fclose(in);
        if (out) fclose(out);
        return -1;
    }

    char buffer[BUFFER_SIZE];
    size_t n;
    while ((n = fread(buffer, 1, BUFFER_SIZE, in)) > 0) {
        fwrite(buffer, 1, n, out);
    }

    fclose(in);
    fclose(out);
    return 0;
}

char *modify_filename(const char *filename, const char *progname) {
    char *base = strdup(filename);
    char *ext = strrchr(base, '.');
    if (ext) *ext = '\0';

    char *newname;
    asprintf(&newname, "%s_%s", base, progname);
    free(base);
    return newname;
}

int is_dir_empty(const char *path) {
    DIR *dir = opendir(path);
    if (!dir) return 1;

    struct dirent *entry;
    int count = 0;
    while ((entry = readdir(dir)) != NULL) {
        if (strcmp(entry->d_name, ".") && strcmp(entry->d_name, "..")) {
            count++;
        }
    }
    closedir(dir);
    return count == 0;
}

void execute_program(const char *filepath, ProgramInfo *prog, const char *output_path) {
    pid_t pid = fork();
    if (pid == 0) {
        int fd = open(output_path, O_WRONLY | O_CREAT | O_TRUNC, 0644);
        if (fd < 0) exit(1);
        dup2(fd, STDOUT_FILENO);
        dup2(fd, STDERR_FILENO);
        close(fd);

        char *exec_args[MAX_ARGS + 2];
        int n = 0;
        for (int i = 0; i < prog->arg_count; i++) {
            exec_args[n++] = prog->args[i];
        }
        exec_args[n++] = (char *)filepath;
        exec_args[n] = NULL;

        execvp(prog->name, exec_args);
        exit(1);
    }
}

void print_output_and_remove(const char *path, ProgramInfo *prog) {
    // Открываем временный файл для чтения
    FILE *f = fopen(path, "r");
    if (!f) return;

    // Сохраняем вывод программы в строке
    char line[BUFFER_SIZE];
    char *output = malloc(1);
    output[0] = '\0';
    while (fgets(line, sizeof(line), f)) {
        output = realloc(output, strlen(output) + strlen(line) + 1);
        strcat(output, line);
    }
    fclose(f);

    // Добавляем вывод программы в её общий вывод
    if (prog->output == NULL) {
        prog->output = output;
    } else {
        prog->output = realloc(prog->output, strlen(prog->output) + strlen(output) + 1);
        strcat(prog->output, output);
        free(output);
    }

    // Удаляем временный файл после вывода
    remove(path);
}

int main(int argc, char *argv[]) {
    if (argc < 3) {
        fprintf(stderr, "Usage: %s <directory> <programs and files>\n", argv[0]);
        return 1;
    }

    char *directory = realpath(argv[1], NULL);
    if (!directory) handle_error("Invalid directory", 1);

    char copy_dir[PATH_MAX];
    snprintf(copy_dir, sizeof(copy_dir), "%s/copy", directory);
    mkdir(copy_dir, 0755);

    ProgramInfo *programs = NULL;
    int prog_count = 0;

    int i = 2;
    while (i < argc) {
        if (strcmp(argv[i], "--") == 0) {
            i++;
            continue;
        }

        programs = realloc(programs, sizeof(ProgramInfo) * (prog_count + 1));
        ProgramInfo *p = &programs[prog_count++];
        p->name = argv[i++];
        p->args = malloc(sizeof(char*) * MAX_ARGS);
        p->arg_count = 0;
        p->args[p->arg_count++] = p->name;
        p->file_patterns = NULL;
        p->pattern_count = 0;
        p->processed_files = NULL;
        p->processed_count = 0;
        p->output = NULL;

        while (i < argc && strcmp(argv[i], "--") && strcmp(argv[i], "--files")) {
            p->args[p->arg_count++] = argv[i++];
        }

        if (i < argc && strcmp(argv[i], "--files") == 0) {
            i++;
            while (i < argc && strcmp(argv[i], "--")) {
                p->file_patterns = realloc(p->file_patterns, sizeof(char*) * (p->pattern_count + 1));
                p->file_patterns[p->pattern_count++] = strdup(argv[i++]);
            }
        }
    }

    struct dirent **namelist;
    int n = scandir(directory, &namelist, NULL, alphasort);
    if (n < 0) handle_error("scandir failed", 1);

    for (int f = 0; f < n; f++) {
        if (namelist[f]->d_type != DT_REG) {
            free(namelist[f]);
            continue;
        }

        char *filename = namelist[f]->d_name;
        char fullpath[PATH_MAX];
        snprintf(fullpath, sizeof(fullpath), "%s/%s", directory, filename);

        for (int p = 0; p < prog_count; p++) {
            ProgramInfo *prog = &programs[p];

            int match = 1;
            if (prog->pattern_count > 0) {
                match = 0;
                for (int j = 0; j < prog->pattern_count; j++) {
                    if (strstr(filename, prog->file_patterns[j])) {
                        match = 1;
                        break;
                    }
                }
            }
            if (!match) continue;

            char *modname = modify_filename(filename, prog->name);
            char copypath[PATH_MAX];
            snprintf(copypath, sizeof(copypath), "%s/%s", copy_dir, modname);

            if (copy_file(fullpath, copypath) != 0) {
                free(modname);
                continue;
            }

            char *before_hash = get_md5_hash(copypath);

            char temp_out[PATH_MAX];
            snprintf(temp_out, sizeof(temp_out), "%s.out", copypath);

            execute_program(copypath, prog, temp_out);
            int status;
            wait(&status);

            char *after_hash = get_md5_hash(copypath);
            if (before_hash && after_hash && strcmp(before_hash, after_hash) == 0) {
                remove(copypath);
            }

            // Сохраняем вывод программы
            print_output_and_remove(temp_out, prog);

            // Сохраняем имя файла для программы
            prog->processed_files = realloc(prog->processed_files, sizeof(char*) * (prog->processed_count + 1));
            prog->processed_files[prog->processed_count++] = strdup(modname);

            free(before_hash);
            free(after_hash);
            free(modname);
        }

        free(namelist[f]);
    }
    free(namelist);

    if (is_dir_empty(copy_dir)) {
        rmdir(copy_dir);
    }

    // Выводим результаты по программам
    for (int p = 0; p < prog_count; p++) {
        ProgramInfo *prog = &programs[p];
        if (prog->output) {
            printf("Results for program: %s\n", prog->name);
            printf("%s\n", prog->output);
            free(prog->output);
        }
    }

    // Освобождаем память
    for (int p = 0; p < prog_count; p++) {
        free(programs[p].args);
        for (int j = 0; j < programs[p].pattern_count; j++) {
            free(programs[p].file_patterns[j]);
        }
        free(programs[p].file_patterns);
        for (int j = 0; j < programs[p].processed_count; j++) {
            free(programs[p].processed_files[j]);
        }
        free(programs[p].processed_files);
    }
    free(programs);
    free(directory);

    printf("All files processed successfully.\n");
    return 0;
}
